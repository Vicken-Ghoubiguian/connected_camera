#include <opencv2/opencv.hpp>
#include <opencv2/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>

#include "../connected_camera_mode.hpp"
#include "../usefull_functions_library/usefull_functions_library.hpp"
#include "../frame_mode_library/frame_mode_library.hpp"
#include "exploits_library.hpp"

using namespace cv;
using namespace usefull_functions;
using namespace frame_mode;

void exploits_function()
{
    int pressed_key;
    int mode = CC_ORDINARY_MODE;
    std::map<std::string, std::string> color_codes_map = color_codes_map_initialisation_function();

    print_howto_in_konsole();

    std::string time_now_as_string;

    VideoCapture cap;
    Mat frame, edge_detection_mode_frame;

    //Open the default camera
    cap.open(0);

    if(!cap.isOpened()) {

	//
        return ;
    }

    //We're entering an infinite loop...
    for(;;)
    {
        cap.read(frame);

	//
	pressed_key = waitKey(1);

	//
	time_now_as_string = today_as_string_returning_function();

	//If 'ESC' is pressed...
        if(pressed_key == 27)
	{
		break;
        }

	//If any alphabetic key (lower or upper case) is pressed...
	if((pressed_key >= 33 && pressed_key <= 90) || (pressed_key >= 92 && pressed_key <= 250))
	{
		mode = pressed_key;

		switch(mode)
		{
			case CC_EDGE_DETECTION_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of edge detection mode"); break;
			case CC_DRAW_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of printed mode"); break;
			case CC_BLACK_AND_WHITE_WITH_RGB_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of black and white with RGB application mode"); break;
			case CC_BLACK_AND_WHITE_WITH_GRAY_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of black and white with gray application mode"); break;
			case CC_PAINTING_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of cartoonized mode"); break;
			case CC_GRAY_AND_WHITE_MODE: writting_in_console_function(color_codes_map["BackgroundCyan"], "[" + time_now_as_string + "]: Activation of gray and white mode"); break;
			case CC_NEGATIVE_OR_INVERTED_MODE: writting_in_console_function(color_codes_map["BackgroundRed"], "[" + time_now_as_string + "]: Activation of negative or inverted mode"); break;
			case CC_HUE_SATURATION_LIGHTNESS_MODE: writting_in_console_function(color_codes_map["BackgroundCyan"], "[" + time_now_as_string + "]: Activation of hue saturation lightness mode"); break;
			case CC_COLORMAP_WINTER_MODE: writting_in_console_function(color_codes_map["BackgroundWhite"], "[" + time_now_as_string + "]: Activation of colormap winter mode"); break;
			case CC_COLORMAP_RAINBOW_MODE: writting_in_console_function(color_codes_map["BackgroundDarkGray"], "[" + time_now_as_string + "]: Activation of colormap rainbow mode"); break;
			case CC_COLORMAP_HOT_MODE: writting_in_console_function(color_codes_map["BackgroundLightRed"], "[" + time_now_as_string + "]: Activation of colormap hot mode"); break;
			case CC_COLORMAP_PARULA_MODE: writting_in_console_function(color_codes_map["BackgroundLightYellow"], "[" + time_now_as_string + "]: Activation of colormap parula mode"); break;
			case CC_COLORMAP_SPRING_MODE: writting_in_console_function(color_codes_map["BackgroundLightMagenta"], "[" + time_now_as_string + "]: Activation of colormap spring mode"); break;
			case CC_COLORMAP_OCEAN_MODE: writting_in_console_function(color_codes_map["BackgroundBlue"], "[" + time_now_as_string + "]: Activation of colormap ocean mode"); break;
			case CC_COLORMAP_JET_MODE: writting_in_console_function(color_codes_map["BackgroundLightGray"], "[" + time_now_as_string + "]: Activation of colormap jet mode"); break;
			case CC_COLORMAP_HSV_MODE: writting_in_console_function(color_codes_map["BackgroundWhite"], "[" + time_now_as_string + "]: Activation of colormap HSV mode"); break;
			case CC_COLORMAP_BONE_MODE: writting_in_console_function(color_codes_map["BackgroundDarkGray"], "[" + time_now_as_string + "]: Activation of colormap bone mode"); break;
			case CC_COLORMAP_AUTUMN_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of colormap autumn mode"); break;
			case CC_COLORMAP_SUMMER_MODE: writting_in_console_function(color_codes_map["BackgroundYellow"], "[" + time_now_as_string + "]: Activation of colormap summer mode"); break;
			case CC_COLORMAP_COOL_MODE: writting_in_console_function(color_codes_map["BackgroundBlue"], "[" + time_now_as_string + "]: Activation of colormap cool mode"); break;
			case CC_COLORMAP_PINK_MODE: writting_in_console_function(color_codes_map["BackgroundLightRed"], "[" + time_now_as_string + "]: Activation of colormap pink mode"); break;
			case CC_FIRST_PENCIL_MODE: writting_in_console_function(color_codes_map["BackgroundLightYellow"], "[" + time_now_as_string + "]: Activation of first pencil mode"); break;
			case CC_SECOND_PENCIL_MODE: writting_in_console_function(color_codes_map["BackgroundLightYellow"], "[" + time_now_as_string + "]: Activation of second pencil mode"); break;
			case CC_STYLIZATION_MODE: writting_in_console_function(color_codes_map["BackgroundMagenta"], "[" + time_now_as_string + "]: Activation of stylization mode"); break;
			case CC_ORDINARY_MODE: writting_in_console_function(color_codes_map["BackgroundGreen"], "[" + time_now_as_string + "]: Activation of ordinary mode"); break;
		}
	}

	//If 'y' is pressed...
        if(mode == CC_EDGE_DETECTION_MODE)
        {
		frame = edge_detection_mode_function(frame);
        }
	//If 'p' is pressed...
	else if(mode == CC_DRAW_MODE)
	{
		frame = cartoonizing_image_function(frame, 5, true);
	}
	//If 'a' is pressed...
	else if(mode == CC_BLACK_AND_WHITE_WITH_RGB_MODE)
	{
		frame = black_and_white_frame_converting_function(frame, COLOR_BGR2BGRA);
	}
	//if 'g' is pressed...
	else if(mode == CC_BLACK_AND_WHITE_WITH_GRAY_MODE)
	{
		frame = black_and_white_frame_converting_function(frame, COLOR_BGR2GRAY);
	}
	//If 'c' is pressed...
	else if(mode == CC_PAINTING_MODE)
	{
		frame = cartoonizing_image_function(frame, 5, false);
	}
	//If 'w' is pressed...
        else if(mode == CC_GRAY_AND_WHITE_MODE)
        {
		frame = gray_and_white_effect_function(frame);
        }
	//If 'i' is pressed...
        else if(mode == CC_NEGATIVE_OR_INVERTED_MODE)
        {
		frame = negative_or_inverted_effect_function(frame);
        }
	//If 'h' is pressed...
	else if(mode == CC_HUE_SATURATION_LIGHTNESS_MODE)
	{
		frame = hue_saturation_lightness_effect_function(frame);
	}
	//If 'b' is pressed...
	else if(mode == CC_COLORMAP_WINTER_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_WINTER);
	}
	//If 'j' is pressed...
	else if(mode == CC_COLORMAP_RAINBOW_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_RAINBOW);
	}
	//If 'v' is pressed...
	else if(mode == CC_COLORMAP_HOT_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_HOT);
	}
	//If 'x' is pressed...
	else if(mode == CC_COLORMAP_PARULA_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_PARULA);
	}
	//If 'z' is pressed...
	else if(mode == CC_COLORMAP_SPRING_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_SPRING);
	}
	//If 'q' is pressed...
	else if(mode == CC_COLORMAP_OCEAN_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_OCEAN);
	}
	//If 'k' is pressed...
	else if(mode == CC_COLORMAP_JET_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_JET);
	}
	//If '_' is pressed...
	else if(mode == CC_COLORMAP_HSV_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_HSV);
	}
	//If '+' is pressed...
	else if(mode == CC_COLORMAP_BONE_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_BONE);
	}
	//If '-' is pressed...
	else if(mode == CC_COLORMAP_AUTUMN_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_AUTUMN);
	}
	//If '*' is pressed...
	else if(mode == CC_COLORMAP_SUMMER_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_SUMMER);
	}
	//If ')' is pressed...
	else if(mode == CC_COLORMAP_COOL_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_COOL);
	}
	//If '(' is pressed...
	else if(mode == CC_COLORMAP_PINK_MODE)
	{
		frame = colormap_effect_application_function(frame, COLORMAP_PINK);
	}
	//If ':' is pressed...
	else if(mode == CC_FIRST_PENCIL_MODE)
	{
		frame = pencil_effect_application_function(frame, true, 60, 0.07f, 0.02f);
	}
	//If ',' is pressed...
	else if(mode == CC_SECOND_PENCIL_MODE)
	{
		frame = pencil_effect_application_function(frame, false, 60, 0.07f, 0.02f);
	}
	//If '!' is pressed...
	else if(mode == CC_STYLIZATION_MODE)
	{
		frame = stylization_effect_application_function(frame, 60, 0.45f);
	}
	//If '<' is pressed...
	else if(mode == CC_IMPROVED_DETAIL_MODE)
	{
		frame = improved_detail_effect_function(frame, 10, 0.15f);
	}
	
	//If 'o' is pressed...
	else if(mode == CC_ORDINARY_MODE)
	{
		frame = frame;
	}

	//Displaying the frame in a window...
        imshow("Connected camera", frame);
    }
}
