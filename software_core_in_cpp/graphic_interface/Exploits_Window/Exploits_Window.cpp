#include "Exploits_Window.hpp"

Exploits_Window::Exploits_Window()
{
	set_title("Connected camera");
	set_border_width(10);

	webcam_frame.set_label("Camera displaying area");
	webcam_frame.set_label_align(Gtk::ALIGN_CENTER, Gtk::ALIGN_CENTER);
	webcam_frame.set_shadow_type(Gtk::SHADOW_OUT);
	webcam_frame.set_size_request(640, 457);

	webcam_area.set_tooltip_text("Camera");
    	webcam_frame.add(webcam_area);

	widgets_grid.attach(webcam_frame, 0, 0, 1, 1);

	description_label.set_text(print_howto_in_window());

	widgets_grid.attach(description_label, 0, 1, 1, 1);

	add(widgets_grid);

	add_events(Gdk::KEY_PRESS_MASK);

	show_all();
}

bool Exploits_Window::on_key_press_event(GdkEventKey* key_event)
{
	if(key_event->keyval == GDK_KEY_Escape)
	{
		hide();

		return true;
	}
	else if(key_event->keyval == GDK_KEY_a)
	{
		webcam_area.setCurrent_mode(CC_BLACK_AND_WHITE_WITH_RGB_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_y)
	{
		webcam_area.setCurrent_mode(CC_EDGE_DETECTION_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_p)
	{
		webcam_area.setCurrent_mode(CC_DRAW_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_h)
	{
		webcam_area.setCurrent_mode(CC_HUE_SATURATION_LIGHTNESS_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_i)
	{
		webcam_area.setCurrent_mode(CC_NEGATIVE_OR_INVERTED_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_g)
	{
		webcam_area.setCurrent_mode(CC_GRAY_AND_WHITE_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_w)
	{
		webcam_area.setCurrent_mode(CC_GRAY_AND_WHITE_MODE);

		return true;
	}
	else if(key_event->keyval == GDK_KEY_c)
	{
		webcam_area.setCurrent_mode(CC_PAINTING_MODE);

		set_text_label_for_webcam_frame("Current mode: painting mode");

		return true;
	}
	else if(key_event->keyval == GDK_KEY_o)
	{
		webcam_area.setCurrent_mode(CC_ORDINARY_MODE);

		return true;
	}

	return Gtk::Window::on_key_press_event(key_event);
}

Exploits_Window::~Exploits_Window()
{

}

void Exploits_Window::set_text_label_for_webcam_frame(string new_text_label_for_webcam_frame)
{
	ustring new_ready_text_label(new_text_label_for_webcam_frame);

	webcam_frame.set_label(new_ready_text_label);
}
